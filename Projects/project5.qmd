---
title: "Client Report - The War with Star Wars "
subtitle: "Course DS 250"
author: "Brandon Hagerman"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import numpy as np
import pandas as pd
import plotly.express as px
from sklearn import metrics
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

sw_data = pd.read_csv("StarWars.csv", encoding='unicode_escape')
```


## Elevator pitch

Star Wars is a very influencial movie franchise. There are lots of differing opinions on the movies. There is also a big disagreement on the classic "Who Shot First" question. The data and graphs below provide insights on these differing opinions. 

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__Shorten the column names and clean them up for easier use with pandas. Provide a table or list that exemplifies how you fixed the names.__

```{python}
#| label: Rename Columns
#| code-summary: Rename Columns
# Renaming Columns
sw_data = sw_data.rename(columns={'Have you seen any of the 6 films in the Star Wars franchise?': 'seenAnyMovie', 
                        'Do you consider yourself to be a fan of the Star Wars film franchise?' : 'isFan',
                        'Which of the following Star Wars films have you seen? Please select all that apply.' : 'hasSeen1',
                        'Unnamed: 4' : 'hasSeen2',
                        'Unnamed: 5' : 'hasSeen3',
                        'Unnamed: 6' : 'hasSeen4',
                        'Unnamed: 7' : 'hasSeen5',
                        'Unnamed: 8' : 'hasSeen6',
                        'Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.' : 'rankEp1',
                        'Unnamed: 10' : 'rankEp2',
                        'Unnamed: 11' : 'rankEp3',
                        'Unnamed: 12' : 'rankEp4',
                        'Unnamed: 13' : 'rankEp5',
                        'Unnamed: 14' : 'rankEp6',
                        'Please state whether you view the following characters favorably, unfavorably, or are unfamiliar with him/her.' : 'viewOnHanSolo',
                        'Unnamed: 16' : 'veiwOnLukeSkywalker',
                        'Unnamed: 17' : 'veiwOnPrincessLeiaOrgana',
                        'Unnamed: 18' : 'veiwOnAnakinSkywalker',
                        'Unnamed: 19' : 'veiwOnObiWanKenobi',
                        'Unnamed: 20' : 'veiwOnEmperorPalpatine',
                        'Unnamed: 21' : 'veiwOnDarthVader',
                        'Unnamed: 22' : 'veiwOnLandoCalrissian',
                        'Unnamed: 23' : 'veiwOnBobaFett',
                        'Unnamed: 24' : 'veiwOnC-3P0',
                        'Unnamed: 25' : 'veiwOnR2D2',
                        'Unnamed: 26' : 'veiwOnJarJarBinks',
                        'Unnamed: 27' : 'veiwOnPadmeAmidala',
                        'Unnamed: 28' : 'veiwOnYoda',
                        'Which character shot first?' : 'whoShotFirst',
                        'Are you familiar with the Expanded Universe?' : 'knowExpandedUniverse',
                        'Do you consider yourself to be a fan of the Expanded Universe?æ' : 'fanExpandedUniverse',
                        'Do you consider yourself to be a fan of the Star Trek franchise?' : 'starTrekFan',
                        })

```

I have a very similar method for renaming a lot of the colums. I shortened with the main 2-3 key words. On movies seen I shortened to episode number instead of title. 

## QUESTION|TASK 2

__Clean and format the data so that it can be used in a machine learning model. As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.__

I remapped each of the value ranges to basic integers. These integers basically represent each value range group. I also handled NaN as the 0 group. 

```{python}
#| label: Cleaned Data
#| code-summary: Cleaned and Reformatted Data

# Filter out people who have seen at least 1 movie
clean_data = sw_data.query('seenAnyMovie == "Yes"')
# filtered_data.head()

# Remove row with labels
clean_data = clean_data.drop(clean_data.index[0])
# clean_data.head()

# Create a new column 'ageGroup' with age ranges converted into a single value
value_map = {np.nan: 0, '18-29': 1, '30-44': 2, '45-60': 3, '> 60': 4}
clean_data['ageGroup'] = clean_data.apply(lambda x: value_map[x['Age']], axis=1)

# Remove the Age column, because it is being replaced with single values in newAge
clean_data = clean_data.drop('Age', axis=1)
clean_data.head()

# Create a column 'educationGroup' with education labels being changed to a single value
education_map = {np.nan: 0, 'Less than high school degree': 1, 'High school degree': 2, 'Some college or Associate degree': 3, 'Bachelor degree': 4, 'Graduate degree': 5}
clean_data['educationGroup'] = clean_data.apply(lambda x: education_map[x['Education']], axis=1)

# Remove the Education column as it is being replaced with single values in educationValue
clean_data = clean_data.drop('Education', axis=1)
clean_data.head()

# Create a column 'incomeGroup' with income labels being changed to a single value
income_map = {np.nan: 0, '$0 - $24,999': 1, '$25,000 - $49,999': 2, '$50,000 - $99,999': 3, '$100,000 - $149,999': 4, '$150,000+': 5}
clean_data['incomeGroup'] = clean_data.apply(lambda x: income_map[x['Household Income']], axis=1)

# Remove Household Income column
clean_data = clean_data.drop('Household Income', axis=1)

# Create target column
clean_data['target'] = clean_data.apply(lambda x: 1 if(x['incomeGroup'] >= 2) else 0, axis=1)
# clean_data.head()
# clean_data.shape

clean_data.head()
```

```{python}
#| label: One Hot Encode Data

# One Hot Encode Data
data_ohe = pd.get_dummies(clean_data)
data_ohe = data_ohe.drop('RespondentID', axis=1)
data_ohe
```


## QUESTION|TASK 3

__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here

hasSeenMoviesPercent = [round(clean_data['hasSeen1'].count() / 835, 2), 
                        round(clean_data['hasSeen2'].count() / 835, 2), 
                        round(clean_data['hasSeen3'].count() / 835, 2), 
                        round(clean_data['hasSeen4'].count() / 835, 2), 
                        round(clean_data['hasSeen5'].count() / 835, 2), 
                        round(clean_data['hasSeen6'].count() / 835, 2)]
# print(clean_data['hasSeen1'].count())
# print(hasSeenMoviesPercent)

```


```{python}
#| label: Q3-chart
#| code-summary: plot example
fig_1 = px.bar(x=hasSeenMoviesPercent,
               y=['Star Wars: Episode I The Phantom Menace', 'Star Wars: Episode II Attack of the Clone', 'Star Wars: Episode III Revenge of the Sith', 
                  'Star Wars: Episode IV A New Hope', 'Star Wars: Episode V The Empire Strikes Back',	'Star Wars: Episode VI Return of the Jedi'],
                  text=hasSeenMoviesPercent,
               color_discrete_sequence=['blue'], 
               title="Which 'Star Wars' Movies Have You Seen?<br><sup>Of 835 respondents who have seen any film</sup>",
               )
fig_1.update_traces(textposition='outside')
fig_1.update_yaxes(autorange='reversed')
fig_1.show()
```


```{python}
#| label: Q3-table
#| code-summary: table example
hanShotFirst = [round(data_ohe['whoShotFirst_Han'].sum() / 834, 2), round(data_ohe['whoShotFirst_Greedo'].sum() / 834, 2), round(data_ohe['whoShotFirst_I don\'t understand this question'].sum() / 834, 2)]

fig_2 = px.bar(x=hanShotFirst, 
               y=['Han', 'Greedo', 'I dont understand this question'],
               title="Who Shot First<br><sup>Of 834 respondents who have seen any film</sup>",
               text=hanShotFirst)
fig_2.update_traces(textposition='outside')
fig_2.update_yaxes(autorange='reversed')

fig_2.show()
```

## QUESTION|TASK 4

__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__

I chose to use a Decision Tree Classifier. The Model has an average accuracy score of 65%. This is very low and not a good predictor. This is due to the lack of data. The variables are also not related very much to income 

```{python}
#| label: Machine Learning Model

# Get features for Model
features = data_ohe.columns
# Remove target column from features
features = features.drop('target')
features = features.drop('incomeGroup')

# print('target' in features)
# print('ageGroup' in features)
# print(features)

X = data_ohe[features]
y = data_ohe['target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Initialize the decision tree
decision_tree = tree.DecisionTreeClassifier()

# Train the model to the training data
decision_tree = decision_tree.fit(X_train, y_train)

y_pred = decision_tree.predict(X_test)

# Check the model accuracy
print(metrics.accuracy_score(y_test, y_pred))

# Check the Mean Squared Error test of the model. Lower score is better. 
print(mean_squared_error(y_test, y_pred))
```